version: "3.8"

networks:
  redisn:
    driver: bridge

services:
  # Servicio para el scraper
  map-scraper:
    build: ./map-scraper # El contexto de la construcción para el scraper
    container_name: map_scraper_waze
    networks:
      - redisn
    volumes:
      - ./map-scraper:/app # Asegura que se sincronice el código con el contenedor

  # Servicio para MongoDB
  mongo:
    build: ./bdd # El contexto de la construcción para MongoDB
    container_name: mongo_waze
    ports:
      - "27017:27017"
    volumes:
      - ./map-scraper/alertas.json:/data/map-scraper/alertas.json:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
    networks:
      - redisn
    depends_on:
      - map-scraper # Asegura que el scraper esté listo antes de iniciar MongoDB

  # Servicio para Mongo Express
  mongo-express:
    image: mongo-express
    container_name: mongo_express_waze
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_SERVER=mongo
    networks:
      - redisn
    depends_on:
      - mongo
      - map-scraper # Asegura que MongoDB esté listo antes de iniciar Mongo Express
    
  filtering:
    build: ./filtering
    container_name: filtering_waze
    restart: always
    depends_on:
      - mongo
      - map-scraper
    volumes:
      - ./filtering:/app
      - ./pig_processing:/pig_processing 
    networks:
      - redisn

volumes:
  mongo_data: # Volumen persistente para MongoDB
  redis_data_1: # Volumen persistente para Redis
    driver: local
  redis-insight: # Volumen para RedisInsight
